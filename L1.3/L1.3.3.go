//Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов с использованием конкурентных вычислений.

package main
import ("fmt"
		"sync")

func main() {
	//Инициализация массива
	list := [5]int{2,4,6,8,10}
	c := 0
	//Чтобы main не завершилась раньше цикла можно использовать sync.WaitGroup
	var wg sync.WaitGroup
	//Создание буферизированного канала
	ch := make(chan int, 5)
	end := make(chan bool)
	wg.Add(5)
	//Итерация по массиву, отправка в горутинах данных о результатах вычислений в канал
	for _, el := range list {
		
		go func(el int) {
			
			ch <- el*el
			wg.Done()
		}(el)//Важно передать переменную цикла функции в качестве аргумета, иначе при каждой интерации будет передаваться информация про один и тот же аргумент
	}

	//Конечный результат будет выведен только после заполнения ch
	go func(end chan bool){
		wg.Wait()
		end <- true
	}(end)
	
	for{
		select{
			//Считываем значения из канала и записываем в результат
		case sq := <- ch:
			c += sq
			//По завершении считывания из канала, выводим сумму
		case <- end:
			fmt.Println(c)
			return
		}
	}
}